version: '3.8'

services:
  nginx:
    image: nginx:latest
    ports:
      - "8091:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - order-service
      - inventory-service
    restart: unless-stopped

  order-service:
    build: ./order-service
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://postgres:password@db:5432/orderdb
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://${OTEL_HOST}:${OTEL_COLLECTOR_PORT_GRPC}
      - INVENTORY_SERVICE_URL=http://inventory-service:8000
      - INVOICE_SERVICE_URL=http://invoice-service:8000 
      - OTEL_RESOURCE_ATTRIBUTES=service.name=order-service,service.namespace=demo4
      - OTEL_PYTHON_LOG_CORRELATION=true
      - OTEL_PYTHON_LOGGING_AUTO_INSTRUMENTATION_ENABLED=true
      - OTEL_PYTHON_LOG_LEVEL=debug
      - OTEL_EXPORTER_OTLP_INSECURE=true
    depends_on:
      - db
    restart: unless-stopped

  db:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: orderdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped

  inventory-service:
    build: ./inventory-service
    ports:
      - "8002:8000"
    environment:
      - MONGO_URI=mongodb://mongo:27017/inventorydb
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://${OTEL_HOST}:${OTEL_COLLECTOR_PORT_GRPC}
      - OTEL_RESOURCE_ATTRIBUTES=service.name=inventory-service,service.namespace=demo4
      - ORDER_SERVICE_URL=http://order-service:8001
      - OTEL_PYTHON_LOG_CORRELATION=true
      - OTEL_PYTHON_LOGGING_AUTO_INSTRUMENTATION_ENABLED=true
      - OTEL_PYTHON_LOG_LEVEL=debug
      - OTEL_EXPORTER_OTLP_INSECURE=true
    depends_on:
      - mongo
    restart: unless-stopped

  mongo:
    image: mongo:latest
    volumes:
      - mongo_data:/data/db
    restart: unless-stopped

  invoice-service:
    build:
      context: ./invoice-service
      dockerfile: Dockerfile
    ports:
      - "8003:8000"
    environment:
      - ASPNETCORE_URLS=http://+:8000
      - OTEL_RESOURCE_ATTRIBUTES=service.name=invoice-service,service.namespace=demo4
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://${OTEL_HOST}:${OTEL_COLLECTOR_PORT_GRPC}
      - OTEL_EXPORTER_OTLP_INSECURE=true
      - ConnectionStrings__DefaultConnection=Host=invoice-db;Database=invoices;Username=postgres;Password=postgres
    depends_on:
      - invoice-db
    restart: unless-stopped

  invoice-db:
    image: postgres:latest
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=invoices
    volumes:
      - invoice_data:/var/lib/postgresql/data
      - ./invoice-service/init.sql:/docker-entrypoint-initdb.d/init.sql
  
  rabbitmq:
    image: rabbitmq:4-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    restart: unless-stopped

  service-stock:
    build:
      context: ./stock-service
      dockerfile: Dockerfile
    ports:
      - "8004:9000"  # Eventuale esposizione di una porta per monitoraggio/healthcheck
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://${OTEL_HOST}:${OTEL_COLLECTOR_PORT_GRPC}
      - OTEL_RESOURCE_ATTRIBUTES=service.name=go-consumer,service.namespace=demo4
      - OTEL_EXPORTER_OTLP_INSECURE=true
      - RABBITMQ_URL=amqp://rabbitmq:5672  # URL di connessione a RabbitMQ
    depends_on:
      - rabbitmq
    restart: unless-stopped

volumes:
  postgres_data:
  mongo_data:
  invoice_data:
