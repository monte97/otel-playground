version: '3.8'

services:
  php-api:
    build: 
      context: quote
      dockerfile: Dockerfile
    container_name: php-api
    deploy:
      resources:
        limits:
          memory: 40M
    restart: unless-stopped
    ports:
      - "${QUOTE_PORT}:${QUOTE_PORT}"
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://${OTEL_COLLECTOR_HOST}:${OTEL_COLLECTOR_PORT_HTTP}
      - OTEL_PHP_AUTOLOAD_ENABLED=true
      - QUOTE_PORT
      - OTEL_RESOURCE_ATTRIBUTES
      - OTEL_SERVICE_NAME=quote
      - OTEL_PHP_INTERNAL_METRICS_ENABLED=true
    depends_on:
      otel-collector:
        condition: service_started
      php-api-db:
        condition: service_healthy

  php-api-db:
    image: mysql:8.0
    container_name: php-api-db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: mydatabase
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    ports:
      - "3306:3306"
    volumes:
      - db_data:/var/lib/mysql
      - ./php-api-db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uuser", "-ppassword"]
      interval: 10s
      timeout: 5s
      retries: 5

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    restart: always
    ports:
      - "8081:80"
    environment:
      PMA_HOST: php-api-db
      MYSQL_ROOT_PASSWORD: root

  jaeger:
    image: jaegertracing/all-in-one:1.50
    container_name: jaeger
    restart: always
    ports:
      - "16686:16686"  # Jaeger UI
      - "14250:14250"  # OTLP HTTP
      - "4318:4317"    # OTLP gRPC

  otel-collector:
    image: ${COLLECTOR_CONTRIB_IMAGE}
    container_name: otel-collector
    deploy:
      resources:
        limits:
          memory: 200M
    restart: unless-stopped
    command: [ "--config=/etc/otelcol-config.yml", "--config=/etc/otelcol-config-extras.yml" ]
    user: 0:0
    volumes:
      - ${HOST_FILESYSTEM}:/hostfs:ro
      - ${DOCKER_SOCK}:/var/run/docker.sock:ro
      - ${OTEL_COLLECTOR_CONFIG}:/etc/otelcol-config.yml
      - ${OTEL_COLLECTOR_CONFIG_EXTRAS}:/etc/otelcol-config-extras.yml
    ports:
      - "${OTEL_COLLECTOR_PORT_GRPC}"
      - "${OTEL_COLLECTOR_PORT_HTTP}"
    depends_on:
      jaeger:
        condition: service_started
    environment:
      - ENVOY_PORT
      - HOST_FILESYSTEM
      - OTEL_COLLECTOR_HOST
      - OTEL_COLLECTOR_PORT_GRPC
      - OTEL_COLLECTOR_PORT_HTTP
    
  loki:
    image: grafana/loki:latest
    container_name: lgtm_loki
    user: root
    environment:
      - ALERTMANAGER_HOST=alertmanager
      - ALERTMANAGER_PORT=9093
    ports:
      - "3100:3100"
    entrypoint: /etc/loki/entrypoint.sh  # Ensure this is the correct path to entrypoint.sh
    volumes:
      - ./configs/loki/entrypoint.sh:/etc/loki/entrypoint.sh
      - ./configs/loki/loki-config.yaml.template:/etc/loki/loki-config.yaml.template
      - loki_data:/data:rw

  tempo:
    image: grafana/tempo:latest
    container_name: lgtm_tempo
    user: root
    ports:
      - "3200:3200"
    command: -config.file=/etc/tempo/tempo-config.yaml
    volumes:
      - ./configs/tempo/tempo-config.yaml:/etc/tempo/tempo-config.yaml
      - tempo_data:/data
    
  prometheus:
    image: prom/prometheus:latest  # Replace with the actual version or an environment variable
    container_name: prometheus
    user: root
    ports:
      - "9090:9090"  # Exposes Prometheus UI on port 9090
    volumes:
      - ./configs/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yaml  # Prometheus configuration file
      - prometheus_data:/data/prometheus  # Persistent storage for Prometheus data
    command: >
      --web.enable-remote-write-receiver
      --web.enable-otlp-receiver
      --enable-feature=exemplar-storage
      --enable-feature=native-histograms
      --storage.tsdb.path=/data/prometheus
      --config.file=/etc/prometheus/prometheus.yaml
    environment:
      - ENABLE_LOGS_PROMETHEUS=${ENABLE_LOGS_PROMETHEUS:-false}  # Optional: Enable logging through environment variable
    restart: unless-stopped  # Ensures Prometheus restarts unless stopped manually

  grafana:
    image: grafana/grafana:latest
    container_name: lgtm_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - PROMETHEUS_HOST=prometheus
      - PROMETHEUS_PORT=9090
      - TEMPO_HOST=tempo
      - TEMPO_PORT=3200
      - LOKI_HOST=loki
      - LOKI_PORT=3100
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/provisioning/entrypoint.sh:/etc/grafana/provisioning/entrypoint.sh
      - ./configs/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./configs/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./configs/grafana/dashboards:/var/lib/grafana/dashboards
    entrypoint: /etc/grafana/provisioning/entrypoint.sh
    depends_on:
      - loki
      - tempo
      - prometheus


  # mimir:
  #   image: grafana/mimir:latest
  #   container_name: lgtm_mimir
  #   ports:
  #     - "9009:9009"
  #   command: -config.file=/etc/mimir/mimir-config.yaml
  #   volumes:
  #     - ./mimir-config.yaml:/etc/mimir/mimir-config.yaml


volumes:
  db_data:
  grafana_data:
  loki_data:
  tempo_data:
  prometheus_data: